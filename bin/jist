#!/usr/bin/env ruby

require 'optparse'

require 'jist'

# For the holdings of options.
options = {}
filenames = []

opts = OptionParser.new do |opts|
  executable_name = File.split($0)[1]
  opts.banner = <<-EOS
Jist (v#{Jist::VERSION}) lets you upload to https://gist.github.com/

Usage: #{executable_name} [-p] [-d DESC] [-t TOKEN] [-u URL] [-f NAME]* [FILE]*
       #{executable_name} --login

When used with no arguments, jist creates an anonymous, private, gist, with
no description. The FILENAME defaults to "a.rb" and we read the contents of
STDIN.

If you'd like your gists to be associated with your github account, so that
you can edit them, and find them in future, first use `jist --login` to obtain
an Oauth2 access token. This is stored and used for all future uses of jist.

If you're calling jist from another program that already has an access_token
with the "gist" scope, then pass it using `jist -t`.

If you specify FILEs on the command line, then jist will use the names of the
files you specify as the filenames for the gist. If you'd rather override the
name you can specify the -f parameter once per file. If you don't specify any
files, then the -f parameter will be used to name the contents of STDIN. If you
don't specify the -f parameter at all when using STDIN, "a.rb" will be used.

Making a gist public causes it to have a prettier, guessable url. And adding
a description can provide useful context to people who stumble across your
gist.

  EOS

  opts.on("--login", "Authenticate jist on this computer.") do
    Jist.login!
    exit
  end

  opts.on("-a", "--anonymous", "Anonymous gist.") do
    options[:anonymous] = true
  end

  opts.on("-f", "--filename [NAME.EXTENSION]", "Sets the filename and syntax type.") do |filename|
    filenames << filename
    options[:filename] = filename
  end

  opts.on("-p", "--public", "Makes your gist public.") do |public|
    options[:public] = public
  end

  opts.on("-d", "--description DESCRIPTION", "Adds a description to your gist.") do |description|
    options[:description] = description
  end

  opts.on("-u", "--update [ URL | ID ]", "Update an existing gist.") do |update|
    options[:update] = update
  end

  opts.on("-t", "--token OAUTH_TOKEN", "The OAuth2 access_token to use.") do |token|
    options[:access_token] = token
  end

  opts.on_tail("-h","--help", "Show this message.") do
    puts opts
    exit
  end

  opts.on_tail("-v", "--version", "Print the version.") do
    puts "jist v#{Jist::VERSION}"
    exit
  end

end
opts.parse!

begin
  if ARGV.size == 0
    $stderr.puts "(type a gist. <ctrl-c> to cancel, <ctrl-d> when done)" if $stdin.tty?
    puts Jist.gist(ARGF.read, options)['html_url']
  else
    files = {}
    ARGV.zip(filenames).each do |(file, name)|
      files[name || file] = File.read(File.expand_path(file))
    end

    puts Jist.multi_gist(files, options)['html_url']
  end
rescue Jist::Error => e
  puts "Error: #{e.message}"
  exit 1
rescue Interrupt
  # bye!
end
