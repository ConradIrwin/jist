#!/usr/bin/env ruby

require 'optparse'

require 'jist'

# For the holdings of options.
options = {}
filenames = []

opts = OptionParser.new do |opts|
  executable_name = File.split($0)[1]
  opts.banner = <<-EOS
Jist (v#{Jist::VERSION}) lets you upload to https://gist.github.com/

The content to be uploaded can be passed as a list of files, if none are
specified STDIN will be read. The default filename for STDIN is "a.rb", and all
filenames can be overridden by repeating the "-f" flag. The most useful reason
to do this is to change the syntax highlighting.

If you'd like your gists to be associated with your GitHub account, so that you
can edit them and find them in future, first use `jist --login` to obtain an
Oauth2 access token. This is stored and used by jist in the future.

Public gists have guessable URLs and can be created with "-p", you can also set
the description at the top of the gist by passing "-d".

Anonymous gists are not associated with your GitHub account, they can be created
with "-a" even after you have used "jist --login". If you already have an access
token with the "gist" scope, you can pass that with "-t".

If you would like to shorten the resulting gist URL, use the -s flag. This will
use GitHub's URL shortener, git.io.

To copy the resulting URL to your clipboard you can use the -c option, or to just
open it directly in your browser, use -o. Using the -j option will copy the embeddable
URL to the clipboard. You can add `alias jist='jist -c'` to your shell's rc file to configure this
behaviour by default.

Instead of creating a new jist, you can update an existing one by passing its ID
or URL with "-u". For this to work, you must be logged in, and have created the
original gist with the same GitHub account.

Usage: #{executable_name} [-o|-c|-j] [-p] [-s] [-d DESC] [-t TOKEN|-a] [-u URL] [-P] [-f NAME]* FILE*
       #{executable_name} --login

  EOS

  opts.on("--login", "Authenticate jist on this computer.") do
    Jist.login!
    exit
  end

  opts.on("-f", "--filename [NAME.EXTENSION]", "Sets the filename and syntax type.") do |filename|
    filenames << filename
    options[:filename] = filename
  end

  opts.on("-p", "--public", "Makes your gist public.") do |public|
    options[:public] = public
  end

  opts.on("-d", "--description DESCRIPTION", "Adds a description to your gist.") do |description|
    options[:description] = description
  end

  opts.on("-s", "--shorten", "Shorten the gist URL using git.io.") do |shorten|
    options[:shorten] = shorten
  end

  opts.on("-u", "--update [ URL | ID ]", "Update an existing gist.") do |update|
    options[:update] = update
  end

  opts.on("-a", "--anonymous", "Create an anonymous gist.") do
    options[:anonymous] = true
  end

  opts.on("-t", "--token OAUTH_TOKEN", "The OAuth2 access_token to use.") do |token|
    options[:access_token] = token
  end

  opts.on("-c", "--copy", "Copy the resulting URL to the clipboard") do
    options[:copy] = true
  end
  opts.on("-j", "--copy-js", "Copy the resulting embeddable URL to the clipboard") do
    options[:copy_js] = true
  end

  opts.on("-o", "--open", "Open the resulting URL in a browser") do
    options[:open] = true
  end

  opts.on("-P", "--paste", "Paste from the clipboard to jist") do
    options[:paste] = true
  end

  opts.on_tail("-h","--help", "Show this message.") do
    puts opts
    exit
  end

  opts.on_tail("-v", "--version", "Print the version.") do
    puts "jist v#{Jist::VERSION}"
    exit
  end

end
opts.parse!

begin
  if options[:paste]
    puts Jist.gist(Jist.paste, options)['html_url']
  elsif ARGV.size == 0
    $stderr.puts "(type a gist. <ctrl-c> to cancel, <ctrl-d> when done)" if $stdin.tty?
    puts Jist.gist(ARGF.read, options)['html_url']
  else
    files = {}
    ARGV.zip(filenames).each do |(file, name)|
      files[name || file] = begin
        File.read(File.expand_path(file))
      rescue => e
        raise e.extend(Jist::Error)
      end
    end

    puts Jist.multi_gist(files, options)['html_url']
  end
rescue Jist::Error => e
  puts "Error: #{e.message}"
  exit 1
rescue Interrupt
  # bye!
end
